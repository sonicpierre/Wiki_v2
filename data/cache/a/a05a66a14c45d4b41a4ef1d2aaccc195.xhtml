
<p>
<a href="/doku.php?id=cpp:deep_learning" class="wikilink1" title="cpp:deep_learning"> Deep Learning</a>
<a href="/lib/exe/detail.php?id=cpp%3Abasic_mnist&amp;media=cpp:reseau_de_neurones.jpg" class="media" title="cpp:reseau_de_neurones.jpg"><img src="/lib/exe/fetch.php?w=350&amp;tok=dc2b2a&amp;media=cpp:reseau_de_neurones.jpg" class="mediacenter" alt="" width="350" /></a>
</p>

<p>
Les réseaux de neuronnes sont principalements utilisés pour les données dites non-structurées comme les images, les sons ou encore les textes. Avant d&#039;employer une de ces méthodes, il est nécessaire de bien avoir testé toutes les autres options de “Machine Learning” plus classique. En effet, à l&#039;heure où j&#039;écris cette documentation (30/03/2021), il est encore très difficile d&#039;interpréter un réseau de neuronne et les résultats qui en découlent.
</p>

<h2 class="sectionedit1" id="theorie">Théorie</h2>
<div class="level2">

<p>
Comme tous les modèles de Machine Learning, il est nécessaire de développer un peu de mathématiques pour bien comprendre le principe d&#039;un réseau de neuronne. 
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Th\u00e9orie&quot;,&quot;hid&quot;:&quot;theorie&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;542-726&quot;} -->
<h3 class="sectionedit2" id="perceptron">Perceptron</h3>
<div class="level3">

<p>
Le perceptron est l&#039;unité élémentaire qui compose un réseau de neuronne. Pour comprendre son fonctionnement imaginons que nous voulons faire la différence entre deux personnes Paul et Michel. Pour cela, nous avons un jeux de données comme toujours en Data Science qui recense pour chacun 5 données associées à leur prénom. Le réseau va donc fonctionner comme suit :
</p>

<p>
<a href="/lib/exe/detail.php?id=cpp%3Abasic_mnist&amp;media=cpp:perceptron.png" class="media" title="cpp:perceptron.png"><img src="/lib/exe/fetch.php?w=800&amp;tok=36bd00&amp;media=cpp:perceptron.png" class="mediacenter" title=" Perceptron" alt=" Perceptron" width="800" /></a>
</p>

<p>
On peut décomposer l&#039;image en différentes parties :
</p>
<ul>
<li class="level1"><div class="li"> Les données qui représentent les caractéristiques de chacune des classes que l&#039;on veut essayer de prédire, (3, 4, 5, 1, 8), (4,6,8,2,4)…. </div>
</li>
</ul>

<p>
<div class='alert alert-warning'>Notons qu&#039;il est nécessaire que toutes les données qu&#039;on présente en entrée aient la même forme. On ne peut pas donner au même réseau un vecteur de 5 pour de 6 caractéristiques.</div>
</p>
<ul>
<li class="level1"><div class="li"> Le perceptron et son expression n&#039;est rien de plus qu&#039;une régression linéaire. Il faut garder à l&#039;esprit que le modèle cherche à ajuster les poids sur chacune des liaisons (w_1, w_2…, B).</div>
</li>
<li class="level1"><div class="li"> L&#039;activation qui est une fonction qui va prendre en entrée le résultat du perceptron (ici 0.2) et va ressortir une classe Paul ou Michel.</div>
</li>
</ul>

<p>
<div class='alert alert-info'><strong>Info</strong>: il est intéressant de noter que le modèle perceptron est équivalent à une régression logistique simple.</div>
</p>

<p>
Il s&#039;agit du modèle initial mais il existe déjà plusieurs variations au niveau de la fonction d&#039;activation. Nous allons décrire  mathématiquement celle qui est le plus souvent utilisées pour le perceptron.
</p>

<p>
$$Sigmoid(x) = \frac{1}{1 + e^{-x}}$$
</p>

<p>
Vous pouvez découvrir mathématiquement d&#039;autre fonctions d&#039;activation qui peuvent être utilisées <a href="https://fr.wikipedia.org/wiki/Fonction_d%27activation" class="urlextern" title="https://fr.wikipedia.org/wiki/Fonction_d%27activation" rel="nofollow"> ici</a>. 
<br/>

<br/>

Nous savons maintenant comment un perceptron effectue une prédiction. Cependant, comment est-il possible d&#039;ajuster les poids de chacune des liaisons ? Pour cela, il faut calculer une erreur entre la valeur prédite et la valeur réelle, il existe différentes fonctions d&#039;erreur en fonction de la classe à prédire. Dans notre exemple, nous avons une classe binaire, Paul ou Michel qui peut se traduire par 1 ou 0. Nous allons donc utiliser l&#039;évaluation d&#039;erreur suivante :
</p>

<p>
$$BinaryCrossEntropy = -\frac{1}{N} \sum^N_{i = 1} y_i * log(p(y_i)) + (1 -y_i) * log(1 - p(y_i))$$
</p>

<p>
Cette fonction d&#039;erreur va ainsi prendre en compte la prédiction mais aussi la confiance dans cette prédiction ($p(y_i)$).
</p>

<p>
<div class='alert alert-info'><strong>Info</strong>: Pour plus d&#039;informations sur cette fonction d&#039;erreur vous pouvez consulter cette article <a href="https://towardsdatascience.com/understanding-binary-cross-entropy-log-loss-a-visual-explanation-a3ac6025181a" class="urlextern" title="https://towardsdatascience.com/understanding-binary-cross-entropy-log-loss-a-visual-explanation-a3ac6025181a" rel="nofollow"> ici</a>.</div>
</p>

<p>
Une fois cette erreur calculée, il est possible d&#039;appliquer une descente de gradient pour ajuster les poids. Nous n&#039;allons pas détailler ici les spécificités mathématiques de la descente de gradient mais vous pouvez les retrouver <a href="/doku.php?id=cpp:regression_supervisee" class="wikilink1" title="cpp:regression_supervisee"> ici</a>. Vous savez maintenant comment fonctionne une cellule unitaire d&#039;un réseau de neuronne.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Perceptron&quot;,&quot;hid&quot;:&quot;perceptron&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;727-3793&quot;} -->
<h3 class="sectionedit3" id="reseau_dense">Réseau dense</h3>
<div class="level3">

<p>
<a href="/lib/exe/detail.php?id=cpp%3Abasic_mnist&amp;media=cpp:dense_network.png" class="media" title="cpp:dense_network.png"><img src="/lib/exe/fetch.php?w=400&amp;tok=2522c9&amp;media=cpp:dense_network.png" class="mediacenter" alt="" width="400" /></a>
</p>

<p>
$$Relu(x) =\left\{
    \begin{array}{ll}
        0 &amp; \mbox{si } \ x&lt;0 \\
        x &amp; \mbox{sinon.}
    \end{array}
\right.
$$
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;R\u00e9seau dense&quot;,&quot;hid&quot;:&quot;reseau_dense&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;3794-3978&quot;} -->
<h2 class="sectionedit4" id="implementation">Implémentation</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Impl\u00e9mentation&quot;,&quot;hid&quot;:&quot;implementation&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;3979-4005&quot;} -->
<h2 class="sectionedit5" id="courbes_entrainement">Courbes entraînement</h2>
<div class="level2">

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Courbes entra\u00eenement&quot;,&quot;hid&quot;:&quot;courbes_entrainement&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;4006-&quot;} -->