
<p>
<a href="/doku.php?id=cpp:ia" class="wikilink1" title="cpp:ia"> Machine Learning</a>
<a href="/lib/exe/detail.php?id=cpp%3Acreation_et_operation_sur_dataframe&amp;media=cpp:donneesrecup.jpg" class="media" title="cpp:donneesrecup.jpg"><img src="/lib/exe/fetch.php?w=500&amp;tok=73b8d1&amp;media=cpp:donneesrecup.jpg" class="media" alt="" width="500" /></a>
</p>

<p>
Il est bon de rappeler qu&#039;il est inutile de construire un modèle de Machine Learning s’il n&#039;est pas entrainé avec des données de bonne qualité. Il faut donc savoir comment et où récupérer les données.
</p>

<h2 class="sectionedit1" id="recuperation_classique_de_donnees_ordonnees">Récupération classique de données ordonnées</h2>
<div class="level2">

<p>
Dans cette partie, nous supposerons que les données sont organisées et nous verrons  comment les récupérer pour les traiter. Il faut bien prendre en compte que la récupération des données constitue une étape capitale pour la suite de notre travail. 
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;R\u00e9cup\u00e9ration classique de donn\u00e9es ordonn\u00e9es&quot;,&quot;hid&quot;:&quot;recuperation_classique_de_donnees_ordonnees&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;275-592&quot;} -->
<h3 class="sectionedit2" id="lecture_classique_de_fichier">Lecture classique de fichier</h3>
<div class="level3">

<p>
Il est parfois nécessaire de ne pas passer par un <abbr title="Uniform Resource Locator">URL</abbr> pour récupérer les données mais plutôt par un fichier sauvegardé localement. Il est alors indispensable de le lire en ayant connaissance du type de fichier pour avoir un dataFrame correctement découpé.
</p>

<p>
<strong>Rappel :</strong>
</p>

<p>
Un dataFrame est un objet qui se différencie d&#039;une liste à 2 dimensions. En effet, il utilise des séries qui diffèrent des listes car elles sont indexées ce qui sera pratique pour sélectionner et traiter les données.
</p>

<p>
<em class="u">En Python :</em>
</p>
<pre class="code python"><span class="kw1">import</span> pandas <span class="kw1">as</span> pd
dataFrame <span class="sy0">=</span> pd.<span class="me1">read_csv</span><span class="br0">&#40;</span><span class="st0">&quot;donnee.csv&quot;</span><span class="sy0">,</span> sep<span class="sy0">=</span><span class="st0">&quot;;&quot;</span><span class="br0">&#41;</span></pre>

<p>
<em class="u">En R :</em>
</p>
<pre class="code python">dataFrame <span class="sy0">=</span> read.<span class="kw3">csv</span><span class="br0">&#40;</span><span class="st0">&quot;donnee.csv&quot;</span><span class="sy0">,</span> sep <span class="sy0">=</span> <span class="st0">&quot;;&quot;</span><span class="sy0">,</span> header<span class="sy0">=</span>T<span class="br0">&#41;</span><span class="sy0">;</span></pre>

<p>
Maintenant que votre dataFrame est chargé dans une variable vous pouvez le manipuler, le nettoyer et, par la suite, élaborer votre modèle.
</p>

<p>
<div class='alert alert-info'><strong>Remarque :</strong> il suffira de changer la méthode associée au read pour lire d&#039;autres types de fichiers.</div>
</p>
<hr />

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Lecture classique de fichier&quot;,&quot;hid&quot;:&quot;lecture_classique_de_fichier&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;593-1607&quot;} -->
<h2 class="sectionedit3" id="regrouper_les_fichiers">Regrouper les fichiers</h2>
<div class="level2">

<p>
Les fichiers contenant les données se trouvent rarement dans un seul dossier mais découpés dans une multitude de fichiers rangés dans un dossier (par date, type…).  Pour développer ce point, nous allons utiliser les données présentes <a href="https://github.com/LlamasPartan/Ressource-Wiki/tree/master/Intelligence%20Artificielle/Machine%20Learning/Constituer%20son%20Dataset" class="urlextern" title="https://github.com/LlamasPartan/Ressource-Wiki/tree/master/Intelligence%20Artificielle/Machine%20Learning/Constituer%20son%20Dataset" rel="nofollow"> ici</a>. Il s&#039;agit de données sur le Covid aux USA qui ont été recensées pour mieux appréhender la maladie.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Regrouper les fichiers&quot;,&quot;hid&quot;:&quot;regrouper_les_fichiers&quot;,&quot;codeblockOffset&quot;:2,&quot;secid&quot;:3,&quot;range&quot;:&quot;1608-2131&quot;} -->
<h3 class="sectionedit4" id="recenser_le_contenu_d_un_dossier">Recenser le contenu d&#039;un dossier</h3>
<div class="level3">

<p>
Avant de regrouper les données, il faut savoir lesquelles sont présentes dans le dossier afin de pouvoir les rassembler.
</p>

<p>
<em class="u">En Python :</em>
</p>
<pre class="code python"><span class="kw1">import</span> <span class="kw3">os</span>
listeFichier <span class="sy0">=</span> <span class="kw3">os</span>.<span class="me1">listdir</span><span class="br0">&#40;</span><span class="st0">'Regrouper donnees Covid/*'</span><span class="br0">&#41;</span></pre>

<p>
<em class="u">En R :</em>
</p>
<pre class="code python">listeFichier <span class="sy0">&lt;</span>- <span class="kw2">list</span>.<span class="me1">files</span><span class="br0">&#40;</span><span class="st0">&quot;Regrouper donnees Covid&quot;</span><span class="sy0">,</span> full.<span class="me1">names</span> <span class="sy0">=</span> TRUE<span class="br0">&#41;</span></pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Recenser le contenu d&#039;un dossier&quot;,&quot;hid&quot;:&quot;recenser_le_contenu_d_un_dossier&quot;,&quot;codeblockOffset&quot;:2,&quot;secid&quot;:4,&quot;range&quot;:&quot;2132-2510&quot;} -->
<h3 class="sectionedit5" id="regrouper_des_fichiers_de_meme_forme">Regrouper des fichiers de même forme</h3>
<div class="level3">

<p>
Il faut ensuite regrouper les fichiers en un seul fichier synthétique. Pour cela, on va créer un dataFrame par fichier puis les regrouper afin d&#039;obtenir un seul dataFrame complet sur lequel entrainer notre modèle.
</p>

<p>
<em class="u">En Python :</em>
</p>
<pre class="code python">dataFrameFinal <span class="sy0">=</span> pd.<span class="me1">read_csv</span><span class="br0">&#40;</span>listeFichier<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">for</span> i <span class="kw1">in</span> <span class="kw2">range</span><span class="br0">&#40;</span><span class="nu0">1</span><span class="sy0">,</span><span class="kw2">len</span><span class="br0">&#40;</span>listeFichier<span class="br0">&#41;</span><span class="br0">&#41;</span>:
    dataFrameFinal.<span class="me1">merge</span><span class="br0">&#40;</span>pd.<span class="me1">read_csv</span><span class="br0">&#40;</span>listeFichier<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">,</span> how <span class="sy0">=</span> <span class="st0">'inner'</span><span class="br0">&#41;</span></pre>

<p>
<em class="u">En R :</em>
</p>
<pre class="code python">library<span class="br0">&#40;</span><span class="st0">&quot;dplyr&quot;</span><span class="br0">&#41;</span>
dataFrame <span class="sy0">=</span> read.<span class="kw3">csv</span><span class="br0">&#40;</span>listeFichier<span class="br0">&#91;</span><span class="nu0">1</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="kw1">in</span> <span class="nu0">2</span>:length<span class="br0">&#40;</span>listeFichier<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span>
    dataFrame <span class="sy0">=</span> bind_rows<span class="br0">&#40;</span>dataFrame<span class="sy0">,</span> read.<span class="kw3">csv</span><span class="br0">&#40;</span>listeFichier<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
<span class="br0">&#125;</span></pre>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Regrouper des fichiers de m\u00eame forme&quot;,&quot;hid&quot;:&quot;regrouper_des_fichiers_de_meme_forme&quot;,&quot;codeblockOffset&quot;:4,&quot;secid&quot;:5,&quot;range&quot;:&quot;2511-3159&quot;} -->
<h3 class="sectionedit6" id="regrouper_les_donnees_partageant_un_meme_id">Regrouper les données partageant un même ID</h3>
<div class="level3">

<p>
Nous allons maintenant assembler des données qui sont liées par un ID. Vous trouverez les données utilisées <a href="https://github.com/LlamasPartan/Machine_Learning_Ressource/tree/master/Constituer%20son%20Dataset/Regrouper%20donnees%20LEGO" class="urlextern" title="https://github.com/LlamasPartan/Machine_Learning_Ressource/tree/master/Constituer%20son%20Dataset/Regrouper%20donnees%20LEGO" rel="nofollow"> ici</a>.
</p>

<p>
<a href="/lib/exe/detail.php?id=cpp%3Acreation_et_operation_sur_dataframe&amp;media=cpp:repartitionlego.png" class="media" title="cpp:repartitionlego.png"><img src="/lib/exe/fetch.php?w=800&amp;tok=40ca87&amp;media=cpp:repartitionlego.png" class="mediacenter" alt="" width="800" /></a>
</p>

<p>
Essayons de rassembler tous les fichiers dans un seul un même document.
</p>

<p>
<em class="u">En Python :</em>
</p>
<pre class="code python"><span class="co1">#On charge les fichiers</span>
inventory_sets <span class="sy0">=</span> pd.<span class="me1">read_csv</span><span class="br0">&#40;</span><span class="st0">'inventory_sets.csv'</span><span class="br0">&#41;</span>
<span class="kw3">sets</span> <span class="sy0">=</span> pd.<span class="me1">read_csv</span><span class="br0">&#40;</span><span class="st0">'sets.csv'</span><span class="br0">&#41;</span>
themes <span class="sy0">=</span> pd.<span class="me1">read_csv</span><span class="br0">&#40;</span><span class="st0">&quot;themes.csv&quot;</span><span class="br0">&#41;</span>
<span class="co1">#On rassemble les fichiers qui ont une collonne en commun </span>
dataInter <span class="sy0">=</span> pd.<span class="me1">merge</span><span class="br0">&#40;</span>inventory_sets<span class="sy0">,</span> <span class="kw3">sets</span><span class="sy0">,</span> on<span class="sy0">=</span><span class="br0">&#91;</span><span class="st0">&quot;set_num&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span>
<span class="co1">#On rassemble les fichiers sur des colonnes qui n'ont pas le même nom</span>
dataFinale <span class="sy0">=</span> pd.<span class="me1">merge</span><span class="br0">&#40;</span>dataInter<span class="sy0">,</span> themes<span class="sy0">,</span> left_on<span class="sy0">=</span><span class="br0">&#91;</span><span class="st0">&quot;theme_id&quot;</span><span class="br0">&#93;</span><span class="sy0">,</span> right_on<span class="sy0">=</span><span class="br0">&#91;</span><span class="st0">&quot;id&quot;</span><span class="br0">&#93;</span><span class="br0">&#41;</span></pre>

<p>
<em class="u">En R :</em>
</p>
<pre class="code python">inventory_sets <span class="sy0">&lt;</span>- read.<span class="kw3">csv</span><span class="br0">&#40;</span><span class="st0">&quot;inventory_sets.csv&quot;</span><span class="br0">&#41;</span>
<span class="kw3">sets</span> <span class="sy0">&lt;</span>- read.<span class="kw3">csv</span><span class="br0">&#40;</span><span class="st0">'sets.csv'</span><span class="br0">&#41;</span>
themes <span class="sy0">&lt;</span>- read_csv<span class="br0">&#40;</span><span class="st0">&quot;themes.csv&quot;</span><span class="br0">&#41;</span>
dataInter <span class="sy0">&lt;</span>- data %<span class="sy0">&gt;</span>%
    inner_join<span class="br0">&#40;</span><span class="kw3">sets</span><span class="sy0">,</span> by <span class="sy0">=</span> c<span class="br0">&#40;</span><span class="st0">&quot;set_num&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
dataFinal <span class="sy0">&lt;</span>- dataInter %<span class="sy0">&gt;</span>%
    inner_join<span class="br0">&#40;</span>themes<span class="sy0">,</span> by <span class="sy0">=</span> c<span class="br0">&#40;</span><span class="st0">&quot;theme_id&quot;</span> <span class="sy0">=</span> <span class="st0">&quot;id&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></pre>

<p>
<strong>Résultat :</strong>
</p>

<p>
<a href="/lib/exe/detail.php?id=cpp%3Acreation_et_operation_sur_dataframe&amp;media=cpp:datasetregroupe.png" class="media" title="cpp:datasetregroupe.png"><img src="/lib/exe/fetch.php?w=800&amp;tok=7b205f&amp;media=cpp:datasetregroupe.png" class="mediacenter" alt="" width="800" /></a>
</p>

<p>
<strong>Source :</strong>
</p>
<ul>
<li class="level1"><div class="li"> <a href="https://rebrickable.com/downloads/" class="urlextern" title="https://rebrickable.com/downloads/" rel="nofollow">https://rebrickable.com/downloads/</a></div>
</li>
<li class="level1"><div class="li"> <a href="https://campus.datacamp.com/courses/joining-data-with-dplyr" class="urlextern" title="https://campus.datacamp.com/courses/joining-data-with-dplyr" rel="nofollow">https://campus.datacamp.com/courses/joining-data-with-dplyr</a></div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Regrouper les donn\u00e9es partageant un m\u00eame ID&quot;,&quot;hid&quot;:&quot;regrouper_les_donnees_partageant_un_meme_id&quot;,&quot;codeblockOffset&quot;:6,&quot;secid&quot;:6,&quot;range&quot;:&quot;3160-4486&quot;} -->
<h2 class="sectionedit7" id="constituer_le_dataset_a_partir_d_une_bdd">Constituer le dataset à partir d&#039;une BDD</h2>
<div class="level2">

<p>
Bien souvent, les données sont rangées dans une BDD pour des questions d&#039;ordre et de clarté c&#039;est pourquoi il est nécessaire de savoir se connecter et faire des opérations sur celle-ci pour créer, lire et modifier sa BDD.
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Constituer le dataset \u00e0 partir d&#039;une BDD&quot;,&quot;hid&quot;:&quot;constituer_le_dataset_a_partir_d_une_bdd&quot;,&quot;codeblockOffset&quot;:8,&quot;secid&quot;:7,&quot;range&quot;:&quot;4487-4769&quot;} -->
<h3 class="sectionedit8" id="a_partir_de_mysql">A partir de MySQL</h3>
<div class="level3">

<p>
Ici, on partira du principe que la base de données est hébergée sur votre ordinateur en local et que vous avez un login et un password. De même, nous partons du principe que <strong>vous connaissez la façon de faire les requêtes</strong>. Il faut tout d&#039;abord effectuer une connexion :
</p>

<p>
<em class="u">En Python :</em>
</p>
<pre class="code python"><span class="kw1">import</span> pymysql.<span class="me1">cursors</span>  
&nbsp;
<span class="co1"># Connectez- vous à la base de données.</span>
connection <span class="sy0">=</span> pymysql.<span class="me1">connect</span><span class="br0">&#40;</span>host<span class="sy0">=</span><span class="st0">'localhost'</span><span class="sy0">,</span> <span class="co1">#Endroit d'hébergement</span>
                             <span class="kw3">user</span><span class="sy0">=</span><span class="st0">'pivirgaux'</span><span class="sy0">,</span> <span class="co1">#Nom d'utilisateur</span>
                             password<span class="sy0">=</span><span class="st0">'pivirgaux'</span><span class="sy0">,</span> <span class="co1">#Mot de Passe                             </span>
                             db<span class="sy0">=</span><span class="st0">'France'</span><span class="sy0">,</span> <span class="co1">#Nom de la base de donnée</span>
                             charset<span class="sy0">=</span><span class="st0">'utf8mb4'</span><span class="sy0">,</span> <span class="co1">#Encodage</span>
                             cursorclass<span class="sy0">=</span>pymysql.<span class="me1">cursors</span>.<span class="me1">DictCursor</span><span class="br0">&#41;</span> <span class="co1">#Lecteur qui nous permettra d'exécuter la requète</span>
<span class="kw1">print</span> <span class="br0">&#40;</span><span class="st0">&quot;Connection effective !!&quot;</span><span class="br0">&#41;</span></pre>

<p>
Si vous êtes sous Window et que vous avez du mal avec l&#039;installation de MySQL je vous invite à aller voir ce <a href="https://techexpert.tips/fr/windows-fr/installer-mysql-sur-windows/" class="urlextern" title="https://techexpert.tips/fr/windows-fr/installer-mysql-sur-windows/" rel="nofollow"> tuto</a>.
</p>

<p>
<em class="u">En R :</em>
</p>
<pre class="code python"><span class="co1"># load the package</span>
library<span class="br0">&#40;</span><span class="st0">'RMySQL'</span><span class="br0">&#41;</span>
library<span class="br0">&#40;</span><span class="st0">'DBI'</span><span class="br0">&#41;</span> <span class="co1">#Sinon vous risquez d'avoir l'erreur Plugin caching_sha2_password could not be loaded</span>
&nbsp;
<span class="co1"># create a MySQL connection object</span>
con <span class="sy0">&lt;</span>- dbConnect<span class="br0">&#40;</span>MySQL<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span>
                 <span class="kw3">user</span> <span class="sy0">=</span> <span class="st0">'pivirgaux'</span><span class="sy0">,</span>
                 password <span class="sy0">=</span> <span class="st0">'pivirgaux'</span><span class="sy0">,</span>
                 host <span class="sy0">=</span> <span class="st0">'localhost'</span><span class="sy0">,</span>
                 dbname <span class="sy0">=</span> <span class="st0">'France'</span><span class="br0">&#41;</span></pre>

<p>
Maintenant, voyons comment faire une requête, il est nécessaire de gérer toutes les possibilités d&#039;erreur c&#039;est pourquoi on fait un try en Python :
</p>

<p>
<em class="u">En Python :</em>
</p>
<pre class="code python"><span class="kw1">try</span>:
    <span class="co1">#On commence par récupérer le curseur pour pouvoir l'utiliser</span>
    <span class="kw1">with</span> connection.<span class="me1">cursor</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">as</span> cursor:
&nbsp;
        <span class="co1"># On prépare notre requète</span>
        sql <span class="sy0">=</span> <span class="st0">&quot;SELECT * from Region&quot;</span>
&nbsp;
        <span class="co1"># Exécutez la requête (Execute Query).</span>
        cursor.<span class="me1">execute</span><span class="br0">&#40;</span>sql<span class="br0">&#41;</span></pre>

<p>
<em class="u">En R :</em>
</p>
<pre class="code python">region <span class="sy0">=</span> dbReadTable<span class="br0">&#40;</span>con<span class="sy0">,</span> <span class="st0">&quot;Region&quot;</span><span class="br0">&#41;</span>
data.<span class="me1">frame</span><span class="br0">&#40;</span>region<span class="br0">&#41;</span></pre>

<p>
<strong>Attaque par injection de BDD :</strong>
si on fait rentrer des données à l&#039;utilisateur, il est bon de se rappeler qu&#039;il n&#039;est pas forcément bien intentionné. Il pourrait, par exemple, rentrer du SQL dans le champ éditable que vous lui proposez. Il pourrait accéder à des données ou, tout simplement, supprimer toute votre BDD c&#039;est pourquoi il est bon de “préparer ses requêtes”.
</p>

<p>
Donnons un exemple de requête qui demande une entrée à l&#039;utilisateur :
</p>
<pre class="code python"> cursor <span class="sy0">=</span> connection.<span class="me1">cursor</span><span class="br0">&#40;</span><span class="br0">&#41;</span>    
 sql <span class="sy0">=</span> <span class="st0">&quot;Delete from Region where nom = %s&quot;</span>
&nbsp;
 <span class="co1"># Exécutez sql et passez un paramètre</span>
 rowCount <span class="sy0">=</span> cursor.<span class="me1">execute</span><span class="br0">&#40;</span>sql<span class="sy0">,</span> <span class="br0">&#40;</span> <span class="st0">&quot;Guadeloupe&quot;</span> <span class="br0">&#41;</span> <span class="br0">&#41;</span>    
 connection.<span class="me1">commit</span><span class="br0">&#40;</span><span class="br0">&#41;</span> </pre>

<p>
 Une fois la requête exécutée, on récupère les colonnes voulues dans un DataFrame pour pouvoir les manipuler :
</p>

<p>
<em class="u">En Python :</em>
</p>
<pre class="code python"><span class="co1">#On crée les listes qui contiendront les différents attributs</span>
listeNom <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
listeDeSlug <span class="sy0">=</span> <span class="br0">&#91;</span><span class="br0">&#93;</span>
<span class="co1">#On passe les différentes lignes venant de notre requète</span>
<span class="kw1">for</span> row <span class="kw1">in</span> cursor:
     listeNom.<span class="me1">append</span><span class="br0">&#40;</span>row.<span class="me1">get</span><span class="br0">&#40;</span><span class="st0">'nom'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
     listeDeSlug.<span class="me1">append</span><span class="br0">&#40;</span>row.<span class="me1">get</span><span class="br0">&#40;</span><span class="st0">'slug'</span><span class="br0">&#41;</span><span class="br0">&#41;</span>
     <span class="co1">#On construit le dataFrame</span>
df <span class="sy0">=</span> pd.<span class="me1">DataFrame</span><span class="br0">&#40;</span><span class="br0">&#123;</span><span class="st0">&quot;Région&quot;</span> : listeNom<span class="sy0">,</span> <span class="st0">&quot;Slug&quot;</span> : listeDeSlug<span class="br0">&#125;</span><span class="br0">&#41;</span>
&nbsp;</pre>

<p>
<em class="u">En R :</em>
</p>
<pre class="code python">res <span class="sy0">&lt;</span>- dbSendQuery<span class="br0">&#40;</span>con<span class="sy0">,</span> <span class="st0">&quot;Select nom FROM Region&quot;</span><span class="br0">&#41;</span>
data <span class="sy0">&lt;</span>- dbFetch<span class="br0">&#40;</span>res<span class="sy0">,</span> n<span class="sy0">=</span><span class="nu0">3</span><span class="br0">&#41;</span> <span class="co1">#n donne le nombre de données on veut récupérer</span></pre>

<p>
 Enfin, on referme la connexion, pour éviter (s’il y a trop de connexions en même temps) que le serveur soit sujet à la latence.
</p>

<p>
<em class="u">En Python :</em>
</p>
<pre class="code python"><span class="kw1">finally</span>:
    connection.<span class="me1">close</span><span class="br0">&#40;</span><span class="br0">&#41;</span></pre>

<p>
<em class="u">En R :</em>
</p>
<pre class="code python">dbDisconnect<span class="br0">&#40;</span>con<span class="br0">&#41;</span></pre>

<p>
<strong>Remarque :</strong>
il est nécessaire de garder en tête qu&#039;il s&#039;agira du même principe avec différentes BDD. Il faudra juste changer le connecteur et adapter la requête si elle n&#039;est pas en SQL mais en NoSQL. Voici quelques connecteurs qui pourraient vous être utiles :
</p>
<div class="table sectionedit9"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0"> Base de donnée </th><th class="col1 leftalign"> Connecteur    Python    </th><th class="col2"> Connecteur R </th><th class="col3"> Avantages </th><th class="col4 leftalign"> Inconvénients   </th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0"> MySQL </td><td class="col1"> pymysql </td><td class="col2"> RMySQL </td><td class="col3">Il est multiplateforme, il est natif dans la majorité des Framework web. </td><td class="col4"> A du mal à gérer des grosses masses de données </td>
	</tr>
	<tr class="row2">
		<td class="col0"> Postgresql </td><td class="col1"> py-postgresql </td><td class="col2"> RPostgres </td><td class="col3">Son mode de licence, son comportement très stable est reconnu </td><td class="col4 leftalign"> Son déploiement.  </td>
	</tr>
	<tr class="row3">
		<td class="col0 leftalign"> mariadb                </td><td class="col1"> mariadb </td><td class="col2">RMariaDB </td><td class="col3"> Capacité à stocker dans une même table des types de données différents (Clés/Valeur) </td><td class="col4"> A tendance à devenir très volumineux rapidement ce qui ralentit les performances </td>
	</tr>
	<tr class="row4">
		<td class="col0 leftalign"> Oracle Database              </td><td class="col1"> cx_Oracle </td><td class="col2"> ROracle </td><td class="col3"> Ce moteur est capable de supporter un grand nombre de bases de données par instance </td><td class="col4 leftalign"> Le coût des licences. Il est un grand consommateur de ressources.  </td>
	</tr>
</table></div>
<!-- EDIT{&quot;target&quot;:&quot;table&quot;,&quot;name&quot;:&quot;&quot;,&quot;hid&quot;:&quot;table&quot;,&quot;secid&quot;:9,&quot;range&quot;:&quot;8728-9540&quot;} -->
<p>
<strong>Source :</strong>
</p>
<ul>
<li class="level1"><div class="li"> <a href="https://www.218labs.ma/comparaison-de-3-bases-de-donnees-open-source-postgresql-mariadb-et-sqlite/" class="urlextern" title="https://www.218labs.ma/comparaison-de-3-bases-de-donnees-open-source-postgresql-mariadb-et-sqlite/" rel="nofollow">https://www.218labs.ma/comparaison-de-3-bases-de-donnees-open-source-postgresql-mariadb-et-sqlite/</a></div>
</li>
<li class="level1"><div class="li"> <a href="http://www.open-source-guide.com/Actualites/Mariadb-10-les-nouveautes-et-avantages" class="urlextern" title="http://www.open-source-guide.com/Actualites/Mariadb-10-les-nouveautes-et-avantages" rel="nofollow">http://www.open-source-guide.com/Actualites/Mariadb-10-les-nouveautes-et-avantages</a></div>
</li>
<li class="level1"><div class="li"> <a href="https://www.editions-ellipses.fr/PDF/9782340016620_extrait.pdf" class="urlextern" title="https://www.editions-ellipses.fr/PDF/9782340016620_extrait.pdf" rel="nofollow">https://www.editions-ellipses.fr/PDF/9782340016620_extrait.pdf</a></div>
</li>
<li class="level1"><div class="li"> <a href="https://gist.github.com/aravindhebbali/f2cc73794e9f9bfaa673" class="urlextern" title="https://gist.github.com/aravindhebbali/f2cc73794e9f9bfaa673" rel="nofollow">https://gist.github.com/aravindhebbali/f2cc73794e9f9bfaa673</a></div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;A partir de MySQL&quot;,&quot;hid&quot;:&quot;a_partir_de_mysql&quot;,&quot;codeblockOffset&quot;:8,&quot;secid&quot;:8,&quot;range&quot;:&quot;4770-9892&quot;} -->
<h3 class="sectionedit10" id="a_partir_de_mongodb">À partir de MongoDB</h3>
<div class="level3">

<p>
Si vous ne connaissez pas du tout le principe du NoSQL,  je vous propose d&#039;aller voir <a href="https://openclassrooms.com/fr/courses/4462426-maitrisez-les-bases-de-donnees-nosql" class="urlextern" title="https://openclassrooms.com/fr/courses/4462426-maitrisez-les-bases-de-donnees-nosql" rel="nofollow"> ici</a>. Parfois, le nombre de données est très important et les BDD utilisant le NoSQL sont plus efficaces. Ici, nous allons essayer de voir comment se connecter à ce type de BDD et interagir avec elle.
</p>

<p>
Comme pour les bases de données SQL, on commence par établir un lien :
</p>
<pre class="code python"><span class="kw1">from</span> pymongo <span class="kw1">import</span> MongoClient
client <span class="sy0">=</span> MongoClient<span class="br0">&#40;</span><span class="br0">&#41;</span>
db <span class="sy0">=</span> client<span class="br0">&#91;</span><span class="st0">'my_database'</span><span class="br0">&#93;</span></pre>

<p>
Ensuite, il faut préparer l&#039;élément qui sera inséré dans le futur :
</p>
<pre class="code python">post <span class="sy0">=</span> <span class="br0">&#123;</span><span class="st0">&quot;username&quot;</span>: <span class="st0">&quot;Martin&quot;</span><span class="sy0">,</span>
             <span class="st0">&quot;password&quot;</span>: <span class="st0">&quot;OnPasseParPython&quot;</span><span class="br0">&#125;</span></pre>

<p>
Une fois la collection créée, il faut l&#039;insérer dans la bonne table de la base de données :
</p>
<pre class="code python"><span class="co1">#On indique clairement la table dans laquelle on veut insérer la base de donnée</span>
posts <span class="sy0">=</span> db.<span class="me1">posts</span>
<span class="co1">#On insert la collection dans cette table</span>
post_id <span class="sy0">=</span> posts.<span class="me1">insert_one</span><span class="br0">&#40;</span>post<span class="br0">&#41;</span>.<span class="me1">inserted_id</span></pre>

<p>
<strong>Remarque :</strong> on peut observer que les collections dans une BDD NoSQL sont similaires à des objets et leur accès y est identique.
</p>

<p>
Il existe d&#039;autres BDDs utilisant le NoSQL, nous allons en citer quelques-unes.
</p>
<div class="table sectionedit11"><table class="inline">
	<thead>
	<tr class="row0">
		<th class="col0"> Base de donnée </th><th class="col1 leftalign"> Connecteur   Python    </th><th class="col2 centeralign">      Avantage                  </th><th class="col3 centeralign">  Inconvénient                  </th>
	</tr>
	</thead>
	<tr class="row1">
		<td class="col0"> MongoDB </td><td class="col1"> pymongo </td><td class="col2"> L&#039;installation est facile. La BDD  permet la conversion en JSon rapidement </td><td class="col3"> La BDD ne supporte pas les jointures . La taille des données est importante. </td>
	</tr>
	<tr class="row2">
		<td class="col0"> Cassandra </td><td class="col1"> cassandra-driver </td><td class="col2"> La BDD évolue régulièrement et n&#039;a aucun point de défaillance unique. </td><td class="col3"> Les performances restent imprévisibles et elle ne prend pas en compte les requêtes ad hoc. </td>
	</tr>
	<tr class="row3">
		<td class="col0"> HBase </td><td class="col1"> hbase-python </td><td class="col2"> Donne des résultats de recherche rapides sur des grandes tables, contient une <abbr title="Application Programming Interface">API</abbr> Java facilement manipulable. </td><td class="col3"> Il n&#039;y a pas de permission d&#039;authentification intégrée, la BDD ne supporte pas le SQL </td>
	</tr>
</table></div>
<!-- EDIT{&quot;target&quot;:&quot;table&quot;,&quot;name&quot;:&quot;&quot;,&quot;hid&quot;:&quot;table1&quot;,&quot;secid&quot;:11,&quot;range&quot;:&quot;11174-11897&quot;} -->
<p>
<strong>Source :</strong>
</p>
<ul>
<li class="level1"><div class="li"> <a href="https://pymongo.readthedocs.io/en/stable/tutorial.html" class="urlextern" title="https://pymongo.readthedocs.io/en/stable/tutorial.html" rel="nofollow">https://pymongo.readthedocs.io/en/stable/tutorial.html</a></div>
</li>
<li class="level1"><div class="li"> <a href="https://www.ambient-it.net/top-meilleures-db-nosql-2019/" class="urlextern" title="https://www.ambient-it.net/top-meilleures-db-nosql-2019/" rel="nofollow">https://www.ambient-it.net/top-meilleures-db-nosql-2019/</a></div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;\u00c0 partir de MongoDB&quot;,&quot;hid&quot;:&quot;a_partir_de_mongodb&quot;,&quot;codeblockOffset&quot;:17,&quot;secid&quot;:10,&quot;range&quot;:&quot;9893-&quot;} -->